{"version":3,"sources":["temp/config.js","components/Article/index.js","components/BootCampAuthor/index.js","components/BootCampDepartments/index.js","components/ContentBlock/index.js","lib/GraphQLData.js","components/GraphQL-ConnectedDemo/index.js","components/GraphQL-IntegratedDemo/index.js","components/GraphQL-Layout/index.js","components/ProductCarousel/index.js","components/ProductDetails/index.js","components/Styleguide-Specimen.js","components/Styleguide-ComponentParams/index.js","components/Styleguide-CustomRouteType/index.js","components/Styleguide-FieldUsage-Checkbox/index.js","components/Styleguide-FieldUsage-ContentList/index.js","components/Styleguide-FieldUsage-Custom/index.js","components/Styleguide-FieldUsage-Date/index.js","components/Styleguide-FieldUsage-File/index.js","components/Styleguide-FieldUsage-Image/index.js","components/Styleguide-FieldUsage-ItemLink/index.js","components/Styleguide-FieldUsage-Link/index.js","components/Styleguide-FieldUsage-Number/index.js","components/Styleguide-FieldUsage-RichText/index.js","components/Styleguide-FieldUsage-Text/index.js","components/Styleguide-Layout/index.js","components/Styleguide-Layout-Reuse/index.js","components/Styleguide-Layout-Tabs/index.js","components/Styleguide-Layout-Tabs-Tab/index.js","components/Styleguide-Multilingual/index.js","components/Styleguide-RouteFields/index.js","components/Styleguide-Section/index.js","components/Styleguide-SitecoreContext/index.js","dataFetcher.js","components/Styleguide-Tracking/index.js","temp/componentFactory.js","lib/layout-service-factory.js","assets/sc_logo.svg","Layout.js","NotFound.js","RouteHandler.js","AppRoot.js","lib/dictionary-service-factory.js","index.js","i18n.js","lib/GraphQLClientFactory.js"],"names":["config","sitecoreApiKey","process","SITECORE_API_KEY","sitecoreApiHost","SITECORE_API_HOST","jssAppName","JSS_APP_NAME","defaultLanguage","DEFAULT_LANGUAGE","graphQLEndpointPath","GRAPH_QL_ENDPOINT_PATH","graphQLEndpoint","GRAPH_QL_ENDPOINT","module","exports","Article","props","Text","field","fields","title","author","publishdate","render","date","toLocaleString","RichText","description","console","log","relatedarticle","map","listitem","index","href","url","pageTitle","BootCampAuthor","authorname","authordesignation","authordepartment","Image","authorImage","BootCampDepartments","departmentName","departmentResponsibilities","departmentLogo","ContentBlock","className","tag","heading","content","extractVariableNames","query","variableNames","definitions","def","variableDefinitions","filter","forEach","defs","kind","variable","name","value","GraphQLData","configuration","Component","SitecoreRenderingWrapper","Error","newConfiguration","options","variables","this","sitecoreContext","pageState","some","operation","ssr","datasource","rendering","dataSource","contextItem","itemId","language","innerQuery","resultProps","Object","assign","GQL","graphql","resetEditorChromes","React","displayName","withSitecoreContext","graphQLResult","connectedQuery","error","loading","toString","id","sample1","jsonValue","sample2","text","target","Link","definition","type","shared","children","results","child","to","path","GraphQLIntegratedDemo","data","disconnectedMode","route","layoutId","Fragment","Placeholder","ProductCarousel","carouselItems","items","carouselText","ProductDetails","productName","productModelYear","productBrand","productPricing","productImage","StyleguideSpecimen","e2eId","uid","replace","componentName","StyleguideComponentParams","params","cssClass","columns","useCallToAction","columnsArray","Array","parseInt","_","headline","StyleguideFieldUsageCheckbox","checkbox","getFieldValue","StyleguideFieldUsageContentList","sharedContentList","localContentList","listItem","textField","StyleguideFieldUsageCustom","customIntField","StyleguideFieldUsageDate","dateTime","toUTCString","toLocaleDateString","StyleguideFieldUsageFile","File","file","StyleguideFieldUsageImage","media","editable","imageParams","mw","mh","height","width","srcSet","sizes","StyleguideFieldUsageItemLink","sharedItemLink","localItemLink","StyleguideFieldUsageLink","externalLink","internalLink","emailLink","paramsLink","showLinkTextWithChildrenPresent","StyleguideFieldUsageText","fieldValue","sample","StyleguideFieldUsageRichText","encode","StyleguideLayout","sections","getChildPlaceholder","section","component","StyleguideLayoutReuse","renderEach","renderEmpty","components","StyleguideLayoutTabs","state","activeTabIndex","setActiveTab","bind","setState","tabsPlaceholder","validTabIndex","isEditing","pageEditing","tab","onClick","tabsComponentWithPlaceholderInjected","withPlaceholder","placeholder","prop","tabsWithPlaceholderAndSitecoreContext","withTranslation","t","i18n","StyleguideSection","style","maxHeight","overflow","JSON","stringify","dataFetcher","axios","method","withCredentials","StyleguideTracking","event","createRef","goal","outcomeName","outcomeValue","campaign","pageId","pageUrl","trackingApiOptions","host","querystringParams","sc_apikey","fetcher","trackingApi","trackEvent","eventId","current","then","alert","catch","goalId","outcomeId","currencyCode","monetaryValue","campaignId","abandonOptions","action","htmlFor","ref","submitEvent","submitGoal","submitOutcome","triggerCampaign","submitPageView","submitBatching","abandonSession","Map","componentFactory","get","set","GraphQLConnectedDemo","GraphQLLayout","StyleguideCustomRouteType","StyleguideFieldUsageNumber","StyleguideLayoutTabsTab","StyleguideMultilingual","StyleguideRouteFields","StyleguideSitecoreContext","layoutServiceFactory","RestLayoutService","apiHost","apiKey","siteName","configurationName","Navigation","src","logo","alt","rel","Layout","VisitorIdentification","propsAreEqual","prevProps","nextProps","deepEqual","memo","NotFound","context","site","RouteHandler","updateLanguage","isSSR","updateLayoutData","sitecoreRoutePath","match","sitecoreRoute","startsWith","getLanguage","create","fetchLayoutData","routeData","updateSitecoreContext","lang","newLanguage","changeLanguage","previousProps","existingRoute","newRoute","isEditorActive","window","location","layoutData","updatable","AppRoot","renderRoute","ssrState","Router","graphQLClient","ApolloProvider","client","SitecoreContext","dictionaryServiceFactory","RestDictionaryService","renderFunction","ReactDOM","initLanguage","__JSS_STATE__","ssrRawJson","document","getElementById","parse","innerHTML","hydrate","sitecore","dictionary","initialGraphQLState","APOLLO_STATE","endpoint","initialCacheState","link","createPersistedQueryLink","sha256","concat","BatchHttpLink","uri","headers","connection","possibleTypes","introspectionQueryResultData","__schema","types","supertype","subtype","cache","InMemoryCache","ApolloClient","ssrMode","ssrForceFetchDelay","restore","GraphQLClientFactory","Promise","resolve","reject","debug","lng","fallbackLng","load","useCookie","interpolation","escapeValue","isInitialized","addResourceBundle","use","initReactI18next","init","dictionaryServiceInstance","read","_namespace","callback","fetchDictionaryData","phrases","err","rootElement","pathname","BrowserRouter"],"mappings":"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","file":"static/js/main.f304d827.chunk.js","sourcesContent":["/* eslint-disable */\n// Do not edit this file, it is auto-generated at build time!\n// See scripts/bootstrap.ts to modify the generation of this file.\nconst config = {};\nconfig.sitecoreApiKey = process.env.SITECORE_API_KEY || \"{1BC4C59C-CFB1-42BF-8DAD-458D712F9481}\",\nconfig.sitecoreApiHost = process.env.SITECORE_API_HOST || \"https://bootcampjssapp.dev.local\",\nconfig.jssAppName = process.env.JSS_APP_NAME || \"bootcampjssapp\",\nconfig.defaultLanguage = process.env.DEFAULT_LANGUAGE || \"en\",\nconfig.graphQLEndpointPath = process.env.GRAPH_QL_ENDPOINT_PATH || \"/sitecore/api/graph/edge\",\nconfig.graphQLEndpoint = process.env.GRAPH_QL_ENDPOINT || `${config.sitecoreApiHost}${config.graphQLEndpointPath}`;\nmodule.exports = config;","import React from 'react';\r\nimport { Text, Image, RichText, DateField } from '@sitecore-jss/sitecore-jss-react';\r\n//  import { DateField } from '@sitecore-jss/sitecore-jss-react/types/components/Date';\r\n//  import { RichText } from '@sitecore-jss/sitecore-jss-react/types/components/RichText';\r\n\r\nconst Article = (props) => (\r\n  <div>\r\n    <h1>\r\n      <Text field={props.fields.title} />\r\n    </h1>\r\n    <br />\r\n    <span>\r\n      <Text field={props.fields.author} />\r\n      &nbsp;(\r\n      <DateField\r\n        field={props.fields.publishdate}\r\n        render={(date) => <em>{date.toLocaleString()}</em>}\r\n      />\r\n      )\r\n    </span>\r\n    <br />\r\n    <p>\r\n      <RichText field={props.fields.description} />\r\n    </p>\r\n    <br />\r\n    {/* <Image media={props.fields.articleimage} /> */}\r\n    {console.log({ props })}\r\n    {props.fields.relatedarticle &&\r\n      props.fields.relatedarticle.map((listitem, index) => (\r\n        <div key={`relatedarticle-${index}`}>\r\n          <a href={listitem.url}>\r\n            <Text field={listitem.fields.pageTitle} />\r\n          </a>\r\n        </div>\r\n      ))}\r\n  </div>\r\n);\r\n\r\nexport default Article;\r\n","import React from 'react';\r\nimport { Text, Image } from '@sitecore-jss/sitecore-jss-react';\r\n\r\nconst BootCampAuthor = (props) => (\r\n  <div>\r\n    <h1>\r\n      <Text field={props.fields.authorname} />\r\n    </h1>\r\n    <span>\r\n      <Text field={props.fields.authordesignation} />\r\n      {'  '}\r\n      {'('}\r\n      <Text field={props.fields.authordepartment} />\r\n      {')'}\r\n    </span>\r\n    <Image field={props.fields.authorImage} />\r\n  </div>\r\n);\r\n\r\nexport default BootCampAuthor;\r\n","import React from 'react';\r\nimport { Text, RichText, Image } from '@sitecore-jss/sitecore-jss-react';\r\n\r\nconst BootCampDepartments = (props) => (\r\n  <div>\r\n    <h1>\r\n      <Text field={props.fields.departmentName} />\r\n    </h1>\r\n    <br />\r\n    <RichText field={props.fields.departmentResponsibilities} />\r\n    <br />\r\n    <Image field={props.fields.departmentLogo} />\r\n  </div>\r\n);\r\n\r\nexport default BootCampDepartments;\r\n","import React from 'react';\r\nimport { Text, RichText } from '@sitecore-jss/sitecore-jss-react';\r\n\r\n/**\r\n * A simple Content Block component, with a heading and rich text block.\r\n * This is the most basic building block of a content site, and the most basic\r\n * JSS component that's useful.\r\n */\r\nconst ContentBlock = ({ fields }) => (\r\n  <div className=\"contentBlock\">\r\n    <Text tag=\"h2\" className=\"contentTitle\" field={fields.heading} />\r\n\r\n    <RichText className=\"contentDescription\" field={fields.content} />\r\n  </div>\r\n);\r\n\r\nexport default ContentBlock;\r\n","import React from 'react';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport { withSitecoreContext, resetEditorChromes } from '@sitecore-jss/sitecore-jss-react';\r\n\r\n/**\r\n * Higher order component that abstracts common JSS + Apollo integration needs.\r\n *\r\n * This component works similar to @apollo/client's graphql() HOC, but:\r\n * * Automatically injects $contextItem and $datasource GraphQL variable values, if the GraphQL declares usage of them\r\n * * Automatically disables execution of subscription queries when doing SSR\r\n * * Passes through any other props to its wrapped component\r\n *\r\n * @param {*} query The GraphQL AST to execute (should go through graphql-tag, no strings)\r\n * @param {*} configuration Values passed in are shipped to @apollo/client configuration (https://www.apollographql.com/docs/react/basics/setup.html#graphql-config)\r\n */\r\nfunction GraphQLData(query, configuration = {}) {\r\n  return function wrapComponent(Component) {\r\n    class SitecoreRenderingWrapper extends React.Component {\r\n      static displayName = `JSSGraphQLComponent(${\r\n        Component.displayName || Component.name || 'Component'\r\n      })`;\r\n\r\n      render() {\r\n        if (!query) {\r\n          throw new Error(\r\n            'query was falsy in GraphQLData. It should be a GraphQL query from graphql-tag. Perhaps missing graphql-tag/loader?'\r\n          );\r\n        }\r\n\r\n        const newConfiguration = { ...configuration };\r\n\r\n        if (!newConfiguration.name) newConfiguration.name = 'data';\r\n\r\n        // ensure variables object exists\r\n        newConfiguration.options = newConfiguration.options || {};\r\n        newConfiguration.options.variables = newConfiguration.options.variables || {};\r\n\r\n        // if we're in experience editor or preview we need to disable SSR of GraphQL queries\r\n        // because SSR queries are made unauthenticated, so they would have normal mode data = bad\r\n        if (this.props.sitecoreContext && this.props.sitecoreContext.pageState !== 'normal') {\r\n          newConfiguration.options.ssr = false;\r\n        } else if (\r\n          query.definitions.some(\r\n            (def) => def.kind === 'OperationDefinition' && def.operation === 'subscription'\r\n          )\r\n        ) {\r\n          // if the document includes any subscriptions, we also disable SSR as this hangs the SSR process\r\n          // not to mention being quite silly to SSR when they're reactive\r\n          newConfiguration.options.ssr = false;\r\n        }\r\n\r\n        // find all variable definitions in the GraphQL query, so we can send only ones we're using\r\n        const variableNames = extractVariableNames(query);\r\n\r\n        // set the datasource variable, if we're using it\r\n        if (variableNames.datasource && this.props.rendering && this.props.rendering.dataSource) {\r\n          newConfiguration.options.variables.datasource = this.props.rendering.dataSource;\r\n        }\r\n\r\n        // set the contextItem variable, if we're using it\r\n        if (\r\n          variableNames.contextItem &&\r\n          this.props.sitecoreContext &&\r\n          this.props.sitecoreContext.itemId\r\n        ) {\r\n          newConfiguration.options.variables.contextItem = this.props.sitecoreContext.itemId;\r\n        }\r\n\r\n        // set the language variable, if we're using it\r\n        if (\r\n          variableNames.language &&\r\n          this.props.sitecoreContext &&\r\n          this.props.sitecoreContext.language\r\n        ) {\r\n          newConfiguration.options.variables.language = this.props.sitecoreContext.language;\r\n        }\r\n\r\n        // build the props processing function that will set the result object to the name\r\n        newConfiguration.props = (props) => {\r\n          const innerQuery = props[newConfiguration.name];\r\n\r\n          let resultProps = {};\r\n\r\n          resultProps[newConfiguration.name] = innerQuery;\r\n\r\n          // run a user-specified props function too if one exists\r\n          if (configuration.props) {\r\n            resultProps = Object.assign(resultProps, configuration.props(props));\r\n          }\r\n\r\n          return resultProps;\r\n        };\r\n\r\n        const GQL = graphql(query, newConfiguration)(Component);\r\n        return <GQL {...this.props} />;\r\n      }\r\n\r\n      // eslint-disable-next-line class-methods-use-this\r\n      componentDidUpdate() {\r\n        resetEditorChromes();\r\n      }\r\n    }\r\n\r\n    return withSitecoreContext()(SitecoreRenderingWrapper);\r\n  };\r\n}\r\n\r\nfunction extractVariableNames(query) {\r\n  const variableNames = {};\r\n  query.definitions\r\n    .map((def) => def.variableDefinitions)\r\n    .filter((def) => def)\r\n    .forEach((defs) =>\r\n      defs.forEach((def) => {\r\n        if (def.kind && def.kind === 'VariableDefinition') {\r\n          variableNames[def.variable.name.value] = true;\r\n        }\r\n      })\r\n    );\r\n\r\n  return variableNames;\r\n}\r\n\r\nexport default GraphQLData;\r\n","import React from 'react';\r\nimport { Text, Link } from '@sitecore-jss/sitecore-jss-react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { loader as gqlLoader } from 'graphql.macro';\r\nimport GraphQLData from '../../lib/GraphQLData';\r\n\r\nconst ConnectedDemoQuery = gqlLoader('./query.graphql');\r\n\r\nconst GraphQLConnectedDemo = (props) => {\r\n  const graphQLResult = props.connectedQuery;\r\n\r\n  // Async loading and error handling\r\n  // Remember to never return null from a JSS component when loading,\r\n  // this will break Experience Editor.\r\n  const { error, loading } = graphQLResult;\r\n\r\n  // Query results load in using the name of their root field (see query.graphql)\r\n  const { datasource, contextItem } = graphQLResult;\r\n\r\n  return (\r\n    <div data-e2e-id=\"graphql-connected\">\r\n      <h2>GraphQL Connected Demo</h2>\r\n\r\n      <p>\r\n        Connected GraphQL executes GraphQL queries directly against the Sitecore GraphQL endpoint.\r\n        You can review the query execution in the browser devtools network tab. Note that Apollo\r\n        Client maintains a query cache - so the same query will not execute twice (i.e. after route\r\n        changes) unless either the page is refreshed, or the <em>fetch policy</em> is set to not use\r\n        the cache. Consult the Apollo documentation for details.\r\n      </p>\r\n\r\n      {loading && <p className=\"alert alert-info\">GraphQL query is executing...</p>}\r\n      {error && <p className=\"alert alert-danger\">GraphQL query error: {error.toString()}</p>}\r\n      {datasource && (\r\n        <div>\r\n          <h4>Datasource Item (via Connected GraphQL)</h4>\r\n          id: {datasource.id}\r\n          <br />\r\n          name: {datasource.name}\r\n          <br />\r\n          sample1: {datasource.sample1?.value}\r\n          <br />\r\n          sample1 (editable): <Text field={datasource.sample1?.jsonValue} />\r\n          <br />\r\n          sample2:\r\n          <br />\r\n          <ul>\r\n            <li>text: {datasource.sample2?.text}</li>\r\n            <li>url: {datasource.sample2?.url}</li>\r\n            <li>target: {datasource.sample2?.target}</li>\r\n            <li>\r\n              editable: <Link field={datasource.sample2?.jsonValue} />\r\n            </li>\r\n            <li>field type: {datasource.sample2?.definition?.type}</li>\r\n            <li>field is shared: {datasource.sample2?.definition.shared.toString()}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {contextItem && (\r\n        <div>\r\n          <h4>Route Item (via Connected GraphQL)</h4>\r\n          id: {contextItem.id}\r\n          <br />\r\n          page title: {contextItem.pageTitle?.value}\r\n          <br />\r\n          children:\r\n          <ul>\r\n            {contextItem?.children?.results?.map((child) => (\r\n              <li key={child?.id}>\r\n                <RouterLink to={child.url?.path} field={child.url?.path}>\r\n                  {child.pageTitle?.value}\r\n                </RouterLink>\r\n                &nbsp; (editable title too! <Text field={child.pageTitle?.jsonValue} />)\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// compose() (from @apollo/client/react/hoc) can be used when you need more than one GraphQL query\r\n// for a single query, e.g. `compose(GraphQLData(q1), GraphQLData(q2))(component)`\r\nexport default GraphQLData(ConnectedDemoQuery, { name: 'connectedQuery' })(GraphQLConnectedDemo);\r\n","import React from 'react';\r\nimport { Text, Link } from '@sitecore-jss/sitecore-jss-react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nconst GraphQLIntegratedDemo = (props) => {\r\n  // Query results in integrated GraphQL replace the normal `fields` data\r\n  // i.e. with { data, }\r\n  const { datasource, contextItem } = props.fields.data;\r\n\r\n  return (\r\n    <div data-e2e-id=\"graphql-integrated\">\r\n      <h2>GraphQL Integrated Demo</h2>\r\n\r\n      <p>\r\n        Integrated GraphQL executes GraphQL queries within the Layout Service endpoint, and merges\r\n        the query results into the Layout Service result JSON. The query results can be seen by\r\n        inspecting the Layout Service response in the browser devtools network tab.\r\n      </p>\r\n\r\n      {datasource && (\r\n        <div>\r\n          <h4>Datasource Item (via Integrated GraphQL)</h4>\r\n          id: {datasource.id}\r\n          <br />\r\n          name: {datasource.name}\r\n          <br />\r\n          sample1: {datasource.sample1?.value}\r\n          <br />\r\n          sample1 (editable): <Text field={datasource.sample1?.jsonValue} />\r\n          <br />\r\n          sample2:\r\n          <br />\r\n          <ul>\r\n            <li>text: {datasource.sample2?.text}</li>\r\n            <li>url: {datasource.sample2?.url}</li>\r\n            <li>target: {datasource.sample2?.target}</li>\r\n            <li>\r\n              editable: <Link field={datasource.sample2?.jsonValue} />\r\n            </li>\r\n            <li>field type: {datasource.sample2?.definition.type}</li>\r\n            <li>field is shared?: {datasource.sample2?.definition.shared.toString()}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {contextItem && (\r\n        <div>\r\n          <h4>Route Item (via Integrated GraphQL)</h4>\r\n          id: {contextItem.id}\r\n          <br />\r\n          page title: {contextItem.pageTitle?.value}\r\n          <br />\r\n          children:\r\n          <ul>\r\n            {contextItem?.children?.results.map((child) => (\r\n              <li key={child.id}>\r\n                <RouterLink to={child.url?.path}>{child.pageTitle?.value}</RouterLink>&nbsp;\r\n                (editable title too! <Text field={child.pageTitle?.jsonValue} />)\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphQLIntegratedDemo;\r\n","import React from 'react';\r\nimport { Placeholder, withSitecoreContext } from '@sitecore-jss/sitecore-jss-react';\r\n\r\nconst GraphQLLayout = ({ sitecoreContext, rendering }) => {\r\n  const disconnectedMode =\r\n    sitecoreContext.route && sitecoreContext.route.layoutId === 'available-in-connected-mode';\r\n\r\n  return (\r\n    <div data-e2e-id=\"graphql-layout\">\r\n      {disconnectedMode && (\r\n        <React.Fragment>\r\n          <p>\r\n            This app is running in disconnected mode. GraphQL requires connected mode, headless\r\n            connected mode, or integrated mode to work.\r\n          </p>\r\n          <p>\r\n            Libraries such as <code>graphql-tools</code> can provide GraphQL API mocking\r\n            capabilities, which could enable disconnected GraphQL. This is not supported out of the\r\n            box, however.\r\n          </p>\r\n          <p>\r\n            To view the GraphQL samples, restart the app using <code>jss start:connected</code>\r\n            &nbsp; or deploy the app to Sitecore to run in integrated mode per the JSS\r\n            documentation.\r\n          </p>\r\n        </React.Fragment>\r\n      )}\r\n      {!disconnectedMode && <Placeholder name=\"jss-graphql-layout\" rendering={rendering} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withSitecoreContext()(GraphQLLayout);\r\n","import React from 'react';\r\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\r\n\r\nconst ProductCarousel = (props) => {\r\n  const carouselItems = props.fields.items;\r\n  console.log(carouselItems);\r\n  return (\r\n    <div>\r\n      {carouselItems &&\r\n        carouselItems.map((listitem, index) => (\r\n          <div key={`carouselitem-${index}`}>\r\n            <Text field={listitem.fields.carouselText} />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductCarousel;\r\n","import React from 'react';\r\nimport { Text, Image } from '@sitecore-jss/sitecore-jss-react';\r\n\r\nconst ProductDetails = (props) => (\r\n  <div>\r\n    <h1>\r\n      <Text field={props.fields.productName} />\r\n    </h1>\r\n    <br />\r\n    <Text field={props.fields.productModelYear} />\r\n    <Text field={props.fields.productBrand} />\r\n    <Text field={props.fields.productPricing} />\r\n    <br />\r\n    <Image field={props.fields.productImage} />\r\n  </div>\r\n);\r\n\r\nexport default ProductDetails;\r\n","import React from 'react';\r\nimport { Text, RichText } from '@sitecore-jss/sitecore-jss-react';\r\n\r\n/**\r\n * Helper component that displays explanatory information and where to find the definitions\r\n * of styleguide specimens.\r\n */\r\nconst StyleguideSpecimen = ({ fields: { heading, description }, children, rendering, e2eId }) => (\r\n  <div className=\"pt-3\" id={`i${rendering.uid.replace(/[{}]/g, '')}`} data-e2e-id={e2eId}>\r\n    <Text tag=\"h4\" field={heading} />\r\n    <RichText field={description} />\r\n\r\n    <p>\r\n      <small>\r\n        Implementation: <code>/src/components/{rendering.componentName}/index.js</code>\r\n        <br />\r\n        Definition:{' '}\r\n        <code>/sitecore/definitions/components/{rendering.componentName}.sitecore.js</code>\r\n      </small>\r\n    </p>\r\n    <div className=\"border p-2\">{children}</div>\r\n  </div>\r\n);\r\n\r\nexport default StyleguideSpecimen;\r\n","import React from 'react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\nconst StyleguideComponentParams = (props) => {\r\n  // props.params (i.e. props.params.cssClass without destructuring) contains the component's params\r\n  const { cssClass, columns, useCallToAction } = props.params;\r\n\r\n  const columnsArray = columns && [...Array(parseInt(columns))];\r\n\r\n  return (\r\n    <StyleguideSpecimen {...props} e2eId=\"styleguide-componentparams\">\r\n      <p className={cssClass}>\r\n        The CSS class of this paragraph (<code>{cssClass}</code>) is set using a param\r\n      </p>\r\n      <div>\r\n        {/* Note that all params come in as string values, like this boolean-like param here: */}\r\n        useCallToAction param: <code>{useCallToAction}</code>\r\n        <br />\r\n        param type: <code>{typeof useCallToAction}</code>\r\n        {useCallToAction === 'true' && (\r\n          <div className=\"alert alert-info\">the call to action is shown</div>\r\n        )}\r\n      </div>\r\n      <p>columns param: {columns}</p>\r\n      <div className=\"row\">\r\n        {columnsArray &&\r\n          columnsArray.map((_, index) => (\r\n            <div key={`col-${index}`} className=\"col-sm\">\r\n              Column {index}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </StyleguideSpecimen>\r\n  );\r\n};\r\n\r\nexport default StyleguideComponentParams;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { withSitecoreContext, Text, RichText } from '@sitecore-jss/sitecore-jss-react';\r\n\r\n// this fancy destructure syntax is essentially equivalent to\r\n// const fields = props.sitecoreContext.route.fields\r\nconst StyleguideCustomRouteType = ({\r\n  sitecoreContext: {\r\n    route: { fields },\r\n  },\r\n}) => (\r\n  <div data-e2e-id=\"styleguide-customroutetype\">\r\n    <Text tag=\"h3\" field={fields.headline} />\r\n\r\n    <p>\r\n      <em>\r\n        By <Text field={fields.author} />\r\n      </em>\r\n    </p>\r\n\r\n    <RichText field={fields.content} />\r\n\r\n    <Link to=\"/styleguide\">Return to the Styleguide</Link>\r\n  </div>\r\n);\r\n\r\n// withSitecoreContext() is the magical glue that gives you route-level context access\r\n// see the context examples in the styleguide for more details.\r\nexport default withSitecoreContext()(StyleguideCustomRouteType);\r\n","import React from 'react';\r\nimport { getFieldValue } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of a Checkbox (boolean) content field within JSS.\r\n */\r\nconst StyleguideFieldUsageCheckbox = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-checkbox\">\r\n    {/* Checkbox fields do not have the ability to be inline edited, so they are directly accessed via their value: */}\r\n    <ul>\r\n      {/*\r\n        The getFieldValue helper allows safely extracting a field value that could be undefined,\r\n        without needing to check that props.fields or props.fields.checkbox are traversable,\r\n        and allowing the specification of an optional default value (default is undefined if unspecified).\r\n       */}\r\n      {props.fields && props.fields.checkbox && props.fields.checkbox.value && (\r\n        <li>\r\n          <code>checkbox</code> is true\r\n        </li>\r\n      )}\r\n      {!props.fields ||\r\n        !props.fields.checkbox ||\r\n        (!props.fields.checkbox.value && (\r\n          <li>\r\n            <code>checkbox</code> is false\r\n          </li>\r\n        ))}\r\n      {getFieldValue(props.fields, 'checkbox2', false) && (\r\n        <li>\r\n          <code>checkbox2</code> is true\r\n        </li>\r\n      )}\r\n      {!getFieldValue(props.fields, 'checkbox2', false) && (\r\n        <li>\r\n          <code>checkbox2</code> is false\r\n        </li>\r\n      )}\r\n    </ul>\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default StyleguideFieldUsageCheckbox;\r\n","import React from 'react';\r\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of a Content List field type within JSS.\r\n * Content Lists are references to 0..n other content items.\r\n * In Sitecore terms, this maps by default to a Treelist field.\r\n */\r\nconst StyleguideFieldUsageContentList = (props) => {\r\n  const { sharedContentList, localContentList } = props.fields;\r\n\r\n  return (\r\n    <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-content-list\">\r\n      <h5>Shared Content List</h5>\r\n      {/*\r\n      Content list fields are returned with their value as an array of the referenced items.\r\n      So we can use the .map() array function to traverse them. Ensure a `key` attribute is set\r\n      on each element to make React's DOM updating happy:\r\n     */}\r\n      {sharedContentList &&\r\n        sharedContentList.map((listItem, index) => (\r\n          <div key={`sharedListItem-${index}`}>\r\n            {/* The referenced item's fields can be rendered and edited using normal helper components: */}\r\n            <p>\r\n              Field: <Text field={listItem.fields.textField} />\r\n            </p>\r\n          </div>\r\n        ))}\r\n\r\n      <h5>Local Content List</h5>\r\n      {localContentList &&\r\n        localContentList.map((listItem, index) => (\r\n          <div key={`localListItem-${index}`}>\r\n            {/* The referenced item's fields can be rendered and edited using normal helper components: */}\r\n            <p>\r\n              Field: <Text field={listItem.fields.textField} />\r\n            </p>\r\n          </div>\r\n        ))}\r\n    </StyleguideSpecimen>\r\n  );\r\n};\r\n\r\nexport default StyleguideFieldUsageContentList;\r\n","import React from 'react';\r\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of a custom content field type within JSS.\r\n * See /sitecore/definitions/components/Styleguide-FieldUsage-Custom.sitecore.js\r\n * for the definition of the structure of the custom field. This code is just for display.\r\n */\r\nconst StyleguideFieldUsageCustom = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-custom\">\r\n    {/* Because the integer field is essentially text, we can render it with the Text helper */}\r\n    <Text field={props.fields.customIntField} />\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default StyleguideFieldUsageCustom;\r\n","import React from 'react';\r\nimport { DateField } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of date and time content field types within JSS.\r\n */\r\nconst StyleguideFieldUsageDate = (props) => {\r\n  return (\r\n    <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-date\">\r\n      <ul>\r\n        <li>\r\n          Date helper: <DateField field={props.fields.date} />\r\n        </li>\r\n        <li>\r\n          Date helper (datetime): <DateField field={props.fields.dateTime} />\r\n        </li>\r\n        <li>\r\n          UTC Date string:&nbsp;\r\n          {/*\r\n            Date helper supports a render props API to give you direct access to the JS Date object for formatting.\r\n            IMPORTANT: the render prop is ignored when in Experience Editor mode to support inline editing.\r\n          */}\r\n          <DateField field={props.fields.date} render={(date) => date.toUTCString()} />\r\n        </li>\r\n        <li>\r\n          Localized Date string (local timezone):&nbsp;\r\n          <DateField field={props.fields.date} render={(date) => date.toLocaleDateString()} />\r\n        </li>\r\n        <li>\r\n          Localized DateTime string (local timezone):&nbsp;\r\n          {/* React components can also be returned from the render props for wrapping */}\r\n          <DateField\r\n            field={props.fields.dateTime}\r\n            render={(date) => <em>{date.toLocaleString()}</em>}\r\n          />\r\n        </li>\r\n      </ul>\r\n    </StyleguideSpecimen>\r\n  );\r\n};\r\n\r\nexport default StyleguideFieldUsageDate;\r\n","import React from 'react';\r\nimport { File } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of a File content field within JSS.\r\n * File types are stored within Sitecore's Media Library data, and can be edited.\r\n */\r\nconst StyleguideFieldUsageFile = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-file\">\r\n    {/* Renders a file link */}\r\n    <File field={props.fields.file} />\r\n    <br />\r\n\r\n    {/* Renders a file link with a custom body and opening in a new tab */}\r\n    <File field={props.fields.file} target=\"_blank\">\r\n      Custom link body\r\n    </File>\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default StyleguideFieldUsageFile;\r\n","import React from 'react';\r\nimport { Image } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of an Image content field within JSS.\r\n * Image field data is uploaded into the Sitecore Media Library.\r\n */\r\nconst StyleguideFieldUsageImage = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-image\">\r\n    <p>Plain image</p>\r\n    <Image media={props.fields.sample1} />\r\n\r\n    {/*\r\n      Advanced image usage example\r\n      editable: controls whether image can be edited in Sitecore Experience Editor\r\n      imageParams: parameters that are passed to Sitecore to perform server-side resizing of the image.\r\n        Sample rescales image to max 100x50 dimensions on the server, respecting aspect ratio\r\n        IMPORTANT: imageParams must be whitelisted for resizing to occur. See /sitecore/config/*.config (search for 'allowedMediaParams')\r\n      any other attributes: pass through to img tag\r\n    */}\r\n    <p>Advanced image (not editable)</p>\r\n    <Image\r\n      field={props.fields.sample2}\r\n      editable={false}\r\n      imageParams={{ mw: 100, mh: 50 }}\r\n      height=\"50\"\r\n      width=\"94\"\r\n      data-sample=\"other-attributes-pass-through\"\r\n    />\r\n\r\n    {/*\r\n      Srcset adaptive image usage example\r\n      Adaptive srcsets are supported using Sitecore server-side resizing.\r\n      The `srcSet` can use Sitecore image resizing parameters (i.e. w, h, mw, mh).\r\n      Sample create a srcset using two sizes (server resizing), 300 and 100px max widths, respecting aspect ratio.\r\n      IMPORTANT: srcSet params must be whitelisted for adaptive resizing to occur. See /sitecore/config/*.config (search for 'allowedMediaParams')\r\n    */}\r\n    <p>Srcset responsive image</p>\r\n    <Image\r\n      field={props.fields.sample2}\r\n      srcSet={[{ mw: 300 }, { mw: 100 }]}\r\n      sizes=\"(min-width: 960px) 300px, 100px\"\r\n      className=\"img-fluid\"\r\n    />\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default StyleguideFieldUsageImage;\r\n","import React from 'react';\r\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of a Content Link content field within JSS.\r\n * Content links are a reference to a single other piece of content.\r\n */\r\nconst StyleguideFieldUsageItemLink = (props) => {\r\n  const { sharedItemLink, localItemLink } = props.fields;\r\n\r\n  return (\r\n    <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-itemlink\">\r\n      <h5>Shared Item Link</h5>\r\n      {/*\r\n        Item link fields are returned with their value as the referenced item value.\r\n      */}\r\n      {sharedItemLink && (\r\n        <div>\r\n          {/* The referenced item's fields can be rendered and edited using normal helper components: */}\r\n          <p>\r\n            Field: <Text field={sharedItemLink.fields.textField} />\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      <h5>Local Item Link</h5>\r\n      {localItemLink && (\r\n        <div>\r\n          <p>\r\n            Field: <Text field={localItemLink.fields.textField} />\r\n          </p>\r\n        </div>\r\n      )}\r\n    </StyleguideSpecimen>\r\n  );\r\n};\r\n\r\nexport default StyleguideFieldUsageItemLink;\r\n","import React from 'react';\r\nimport { Link } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of a General Link (hyperlink) content field within JSS.\r\n */\r\nconst StyleguideFieldUsageLink = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-link\">\r\n    External link:&nbsp;\r\n    <Link field={props.fields.externalLink} />\r\n    <br />\r\n    Internal link:&nbsp;\r\n    <Link field={props.fields.internalLink}>\r\n      <em>HTML</em> or other components can be used within link renderers, for example links to\r\n      images.\r\n    </Link>\r\n    <br />\r\n    Email link:&nbsp;\r\n    <Link field={props.fields.emailLink} />\r\n    <br />\r\n    All possible content params link:&nbsp;\r\n    <Link field={props.fields.paramsLink} />\r\n    <br />\r\n    The link component accepts params of its own:&nbsp;\r\n    <Link\r\n      field={props.fields.externalLink}\r\n      showLinkTextWithChildrenPresent={true}\r\n      className=\"font-weight-bold\"\r\n      data-otherattributes=\"pass-through-to-anchor-tag\"\r\n    />\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default StyleguideFieldUsageLink;\r\n","import React from 'react';\r\nimport { Text, getFieldValue } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of a Number (decimal) content field within JSS.\r\n */\r\nconst StyleguideFieldUsageText = (props) => {\r\n  const fieldValue = getFieldValue(props.fields, 'sample');\r\n\r\n  return (\r\n    <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-number\">\r\n      {/* Basic emission of a number field for editing can be done with the <Text> component. */}\r\n      <Text field={props.fields.sample} />\r\n\r\n      {/* Direct access to the value, which is a JS number, is also supported. */}\r\n      <p>\r\n        JS value type: {typeof fieldValue}\r\n        <br />\r\n        JS value: {fieldValue}\r\n      </p>\r\n    </StyleguideSpecimen>\r\n  );\r\n};\r\n\r\nexport default StyleguideFieldUsageText;\r\n","import React from 'react';\r\nimport { RichText } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of a Rich Text (HTML) content field within JSS.\r\n */\r\nconst StyleguideFieldUsageRichText = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-richtext\">\r\n    {/* Basic use of a rich text field. Wraps in a <div>. */}\r\n    <RichText field={props.fields.sample} />\r\n\r\n    {/* Advanced usage of rich text field. Specifies a custom wrapper tag, turns off Sitecore editing, and has a CSS class on the wrapper */}\r\n    <RichText\r\n      field={props.fields.sample2}\r\n      tag=\"section\"\r\n      editable={false}\r\n      className=\"text-center\"\r\n      data-sample=\"other-attributes-pass-through\"\r\n    />\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default StyleguideFieldUsageRichText;\r\n","import React from 'react';\r\nimport { Text, getFieldValue } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates usage of a Text content field within JSS.\r\n * Text fields are HTML encoded by default.\r\n */\r\nconst StyleguideFieldUsageText = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-text\">\r\n    {/* Basic use of a text field. No wrapper. */}\r\n    <Text field={props.fields.sample} />\r\n\r\n    {/* Advanced usage of text field. Specifies a wrapper tag, turns off Sitecore editing, supports raw HTML, and has a CSS class on the wrapper */}\r\n    <Text\r\n      field={props.fields.sample2}\r\n      tag=\"section\"\r\n      editable={false}\r\n      encode={false}\r\n      className=\"font-weight-bold\"\r\n      data-sample=\"other-attributes-pass-through\"\r\n    />\r\n\r\n    {/*\r\n      Use this API when you need direct programmatic access to a field as a variable.\r\n      Note: editing such a value in Experience Editor is not possible, and direct field\r\n      editing must be used to edit a value emitted like this (the pencil icon when the rendering\r\n      is selected in xEditor)\r\n    */}\r\n    <div>Raw value (not editable): {getFieldValue(props.fields, 'sample')}</div>\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default StyleguideFieldUsageText;\r\n","import React from 'react';\r\nimport { Placeholder, getChildPlaceholder, getFieldValue } from '@sitecore-jss/sitecore-jss-react';\r\n\r\n/**\r\n * The main layout (columns) of the styleguide.\r\n * Navigation is automatically generated based on the components added to the layout,\r\n * and does not need to be manually maintained.\r\n */\r\nconst StyleguideLayout = (props) => {\r\n  // this code reads the components in the child placeholders of this component,\r\n  // and projects them into the left navigation column for the styleguide\r\n  const sections = getChildPlaceholder(props.rendering, 'jss-styleguide-layout')\r\n    .filter((section) => getFieldValue(section, 'heading'))\r\n    .map((section) => ({\r\n      heading: getFieldValue(section, 'heading'),\r\n      id: `i${section.uid.replace(/[{}]/g, '')}`,\r\n      children: getChildPlaceholder(section, 'jss-styleguide-section')\r\n        .filter((component) => getFieldValue(component, 'heading'))\r\n        .map((component) => ({\r\n          heading: getFieldValue(component, 'heading'),\r\n          id: `i${component.uid.replace(/[{}]/g, '')}`,\r\n        })),\r\n    }))\r\n    .map((section) => (\r\n      <nav key={section.heading} className=\"nav flex-column pt-2\">\r\n        <a href={`#${section.id}`} className=\"nav-item font-weight-bold\">\r\n          {section.heading}\r\n        </a>\r\n        {section.children && (\r\n          <nav className=\"nav flex-column\">\r\n            {section.children.map(\r\n              (child) =>\r\n                child.heading && (\r\n                  <a key={child.id} href={`#${child.id}`}>\r\n                    {child.heading}\r\n                  </a>\r\n                )\r\n            )}\r\n          </nav>\r\n        )}\r\n      </nav>\r\n    ));\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-sm-8 col-lg-10\">\r\n        <Placeholder name=\"jss-styleguide-layout\" rendering={props.rendering} />\r\n      </div>\r\n      <div className=\"col-sm-4 col-lg-2 order-sm-first pt-2\">{sections}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StyleguideLayout;\r\n","import React from 'react';\r\nimport { Placeholder } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates how to reuse content within JSS. See /data/routes/styleguide/en.yml\r\n * for the reused content definition sample. This component also demonstrates how to use\r\n * the Placeholder component's render props API to wrap all components in the placeholder\r\n * in a column tag (thus creating a horizontally laid out placeholder)\r\n */\r\nconst StyleguideLayoutReuse = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-layout-reuse\">\r\n    <div className=\"row\">\r\n      {/*\r\n        This placeholder is using _render props_ to enable customizing the markup for each component within.\r\n        In this case, it's placing each component in its own column of a flexbox layout - giving an n-up columnar layout.\r\n        The component itself does not need to know it's living in a columnar layout.\r\n\r\n        There are three render props available:\r\n        renderEach - called once for each content component\r\n          Sitecore Experience Editor markup is automatically rendered in between content components when present\r\n        renderEmpty - called when the placeholder contains no content components. Can be used to wrap the Sitecore EE empty placeholder\r\n          markup in something that's visually correct, like here where we need to wrap it in a column div to make it selectable.\r\n        render - called once and passed _all_ components in the placeholder. Allows custom iteration. EE code markup must be accounted for.\r\n\r\n        Generally speaking stick to renderEach and renderEmpty unless doing something really custom.\r\n       */}\r\n      <Placeholder\r\n        rendering={props.rendering}\r\n        name=\"jss-reuse-example\"\r\n        renderEach={(component, index) => (\r\n          <div className=\"col-sm\" key={index}>\r\n            {component}\r\n          </div>\r\n        )}\r\n        renderEmpty={(components) => <div className=\"col-sm\">{components}</div>}\r\n      />\r\n    </div>\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default StyleguideLayoutReuse;\r\n","import React from 'react';\r\nimport { withPlaceholder, withSitecoreContext, Text } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates advanced component techniques in JSS.\r\n * This example implements a simple-looking tabs component.\r\n * Each tab is itself a child component added to a placeholder defined on the tabs component.\r\n * The tab component introspects its child components to render the tab headings (i.e. the tab children render partial content in two places).\r\n * When this component is edited in Sitecore Experience Editor, the tabbing behavior is turned off and each tab stacks on top of each other\r\n * for easy inline editing.\r\n */\r\nclass StyleguideLayoutTabs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTabIndex: 0,\r\n    };\r\n\r\n    this.setActiveTab = this.setActiveTab.bind(this);\r\n  }\r\n\r\n  setActiveTab(index) {\r\n    this.setState({ activeTabIndex: index });\r\n  }\r\n\r\n  render() {\r\n    const { tabsPlaceholder, sitecoreContext } = this.props;\r\n\r\n    let validTabIndex = 0;\r\n    const isEditing = sitecoreContext && sitecoreContext.pageEditing;\r\n\r\n    return (\r\n      <StyleguideSpecimen {...this.props} e2eId=\"styleguide-layout-tabs\">\r\n        <ul className=\"nav nav-tabs\">\r\n          {/*\r\n            When the page is editing, we hide the tab headings, because they are not updated when xEditor adds or removes a tab rendering.\r\n            Instead, we show the tab header inline with the tab contents (see Styleguide-Layout-Tabs-Tab).\r\n          */}\r\n          {!isEditing &&\r\n            (tabsPlaceholder || [])\r\n              .filter((tab) => tab.props && tab.props.fields)\r\n              .map((tab, index) => (\r\n                <li className=\"nav-item\" key={`tab${index}`}>\r\n                  <a\r\n                    className={`nav-link ${index === this.state.activeTabIndex ? 'active' : null}`}\r\n                    onClick={() => this.setActiveTab(index)}\r\n                    href=\"#t\"\r\n                  >\r\n                    <Text field={tab.props.fields.title} />\r\n                  </a>\r\n                </li>\r\n              ))}\r\n        </ul>\r\n        <div className=\"p-3 border-left border-right border-bottom\">\r\n          {(tabsPlaceholder || []).map((tab, index) => {\r\n            const isValid = tab.props && tab.props.fields;\r\n\r\n            // allow experience editor markup components to render\r\n            if (!isValid && isEditing) return tab;\r\n\r\n            validTabIndex += 1;\r\n\r\n            // we render the tab either if it's active - or we're editing,\r\n            // in which case we stack all tabs for visual editing\r\n            if (this.state.activeTabIndex === validTabIndex - 1 || isEditing) {\r\n              return tab;\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n      </StyleguideSpecimen>\r\n    );\r\n  }\r\n}\r\n\r\n// This is a _higher order component_ that will wrap our component and inject placeholder\r\n// data into it as a prop (in this case, props.tabsPlaceholder).\r\n// this another option compared to using the <Placeholder> component;\r\n// in this case, chosen because we primarily need access to the _data_\r\n// of the placeholder.\r\nconst tabsComponentWithPlaceholderInjected = withPlaceholder({\r\n  placeholder: 'jss-tabs',\r\n  prop: 'tabsPlaceholder',\r\n})(StyleguideLayoutTabs);\r\n\r\n// We need to know if experience editor is active, to disable the dynamic tab behavior for editing.\r\n// Using the same technique as injecting the placeholder, we wrap the component again to inject the\r\n// `sitecoreContext` prop.\r\nconst tabsWithPlaceholderAndSitecoreContext = withSitecoreContext()(\r\n  tabsComponentWithPlaceholderInjected\r\n);\r\n\r\nexport default tabsWithPlaceholderAndSitecoreContext;\r\n","import React from 'react';\r\nimport { Text, RichText, withSitecoreContext } from '@sitecore-jss/sitecore-jss-react';\r\n\r\n/**\r\n * This is a single tab within the tabs sample component. These are added to the tabs placeholder.\r\n * This component demonstrates conditionally altering rendering when in the Sitecore Experience Editor to improve\r\n * author experience.\r\n */\r\nconst StyleguideLayoutTabsTab = (props) => (\r\n  <div data-e2e-class=\"styleguide-layout-tabs-tab\">\r\n    {/*\r\n      When we're editing the tabs we stack each tab vertically,\r\n      which means there's no regular tab titles rendered.\r\n      So we conditionally render the tab title here, when editing. */}\r\n    {props.sitecoreContext && props.sitecoreContext.pageEditing && (\r\n      <Text tag=\"h5\" field={props.fields.title} />\r\n    )}\r\n\r\n    {/* React.Fragment tells React to not use any wrapping tag for the component */}\r\n    <RichText field={props.fields.content} />\r\n  </div>\r\n);\r\n\r\nexport default withSitecoreContext()(StyleguideLayoutTabsTab);\r\n","import React from 'react';\r\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { Link } from 'react-router-dom';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates using the dictionary functionality and defining route data in\r\n * multiple languages.\r\n */\r\nconst StyleguideMultilingual = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-multilingual\">\r\n    <Text field={props.fields.sample} encode={false} tag=\"p\" />\r\n\r\n    <p>\r\n      This is a static dictionary entry from <code>/data/dictionary</code>:&nbsp;\r\n      {props.t('styleguide-sample')}\r\n    </p>\r\n\r\n    <p>\r\n      <Link to=\"/en/styleguide\">Show in English</Link>\r\n      <br />\r\n      <Link to=\"/da-DK/styleguide\">Show in da-DK</Link>\r\n    </p>\r\n    <p>The current language is: {props.i18n.language}</p>\r\n  </StyleguideSpecimen>\r\n);\r\n\r\n// the withTranslation() _higher order component_ wraps the\r\n// component in another component and injects the `i18n`\r\n// and `t` props into it so that we can use them for translation.\r\n// Any component that wants to use translation will need to use this,\r\n// or the react-i18next render props API. See the react-i18next docs for more details.\r\nexport default withTranslation()(StyleguideMultilingual);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { withSitecoreContext, Text } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates gaining access to route-level fields.\r\n * This technique builds on the Styleguide-SitecoreContext technique,\r\n * to also get the route level field data and make it editable.\r\n */\r\nconst StyleguideRouteFields = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-route-fields\">\r\n    <p>\r\n      Route level <code>pageTitle</code> field:{' '}\r\n      {props.sitecoreContext.route && <Text field={props.sitecoreContext.route.fields.pageTitle} />}\r\n    </p>\r\n    <p>\r\n      <Link to=\"/styleguide/custom-route-type\">Sample of using a custom route type</Link>\r\n    </p>\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default withSitecoreContext()(StyleguideRouteFields);\r\n","import React from 'react';\r\nimport { Placeholder, Text } from '@sitecore-jss/sitecore-jss-react';\r\n\r\n/**\r\n * Represents a category of styleguide specimens within the Styleguide-Layout.\r\n * Usage examples are added to the `styleguide-section` placeholder that this\r\n * exposes.\r\n */\r\nconst StyleguideSection = (props) => (\r\n  <div className=\"pt-3\" id={`i${props.rendering.uid.replace(/[{}]/g, '')}`}>\r\n    <Text className=\"border-bottom\" field={props.fields.heading} tag=\"h3\" />\r\n    <Placeholder name=\"jss-styleguide-section\" rendering={props.rendering} />\r\n  </div>\r\n);\r\n\r\nexport default StyleguideSection;\r\n","import React from 'react';\r\nimport { withSitecoreContext } from '@sitecore-jss/sitecore-jss-react';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/**\r\n * Demonstrates gaining access to the route-level Sitecore Context from\r\n * within other components.\r\n */\r\nconst StyleguideSitecoreContext = (props) => (\r\n  <StyleguideSpecimen {...props} e2eId=\"styleguide-sitecore-context\">\r\n    <p>The current Sitecore Context is...</p>\r\n    <pre style={{ maxHeight: '400px', overflow: 'scroll' }}>\r\n      {JSON.stringify(props.sitecoreContext, null, 2)}\r\n    </pre>\r\n  </StyleguideSpecimen>\r\n);\r\n\r\nexport default withSitecoreContext()(StyleguideSitecoreContext);\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Implements a data fetcher using Axios - replace with your favorite\r\n * SSR-capable HTTP or fetch library if you like. See HttpDataFetcher<T> type\r\n * in sitecore-jss library for implementation details/notes.\r\n * @param {string} url The URL to request; may include query string\r\n * @param {any} data Optional data to POST with the request.\r\n */\r\nexport function dataFetcher(url, data) {\r\n  return axios({\r\n    url,\r\n    method: data ? 'POST' : 'GET',\r\n    data,\r\n    // note: axios needs to use `withCredentials: true` in order for Sitecore cookies to be included in CORS requests\r\n    // which is necessary for analytics and such\r\n    withCredentials: true,\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { withSitecoreContext, trackingApi } from '@sitecore-jss/sitecore-jss-react';\r\nimport { dataFetcher } from '../../dataFetcher';\r\nimport config from '../../temp/config';\r\nimport StyleguideSpecimen from '../Styleguide-Specimen';\r\n\r\n/* eslint-disable no-alert,no-undef */\r\n\r\n/**\r\n * Demonstrates analytics tracking patterns (xDB)\r\n */\r\nclass StyleguideTracking extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.event = React.createRef();\r\n    this.goal = React.createRef();\r\n    this.outcomeName = React.createRef();\r\n    this.outcomeValue = React.createRef();\r\n    this.campaign = React.createRef();\r\n    this.pageId = React.createRef();\r\n    this.pageUrl = React.createRef();\r\n\r\n    this.trackingApiOptions = {\r\n      host: config.sitecoreApiHost,\r\n      querystringParams: {\r\n        sc_apikey: config.sitecoreApiKey,\r\n      },\r\n      fetcher: dataFetcher,\r\n    };\r\n  }\r\n\r\n  submitEvent() {\r\n    trackingApi\r\n      .trackEvent([{ eventId: this.event.current.value }], this.trackingApiOptions)\r\n      .then(() => alert('Page event pushed'))\r\n      .catch((error) => alert(error));\r\n  }\r\n\r\n  submitGoal() {\r\n    trackingApi\r\n      .trackEvent([{ goalId: this.goal.current.value }], this.trackingApiOptions)\r\n      .then(() => alert('Goal pushed'))\r\n      .catch((error) => alert(error));\r\n  }\r\n\r\n  submitOutcome() {\r\n    trackingApi\r\n      .trackEvent(\r\n        [\r\n          {\r\n            outcomeId: this.outcomeName.current.value,\r\n            currencyCode: 'USD',\r\n            monetaryValue: this.outcomeValue.current.value,\r\n          },\r\n        ],\r\n        this.trackingApiOptions\r\n      )\r\n      .then(() => alert('Outcome pushed'))\r\n      .catch((error) => alert(error));\r\n  }\r\n\r\n  triggerCampaign() {\r\n    trackingApi\r\n      .trackEvent([{ campaignId: this.campaign.current.value }], this.trackingApiOptions)\r\n      .then(() => alert('Campaign set'))\r\n      .catch((error) => alert(error));\r\n  }\r\n\r\n  submitPageView() {\r\n    trackingApi\r\n      .trackEvent(\r\n        [{ pageId: this.pageId.current.value, url: this.pageUrl.current.value }],\r\n        this.trackingApiOptions\r\n      )\r\n      .then(() => alert('Page view pushed'))\r\n      .catch((error) => alert(error));\r\n  }\r\n\r\n  abandonSession() {\r\n    const abandonOptions = {\r\n      action: 'flush',\r\n      ...this.trackingApiOptions,\r\n    };\r\n\r\n    trackingApi\r\n      .trackEvent([], abandonOptions)\r\n      .then(() => alert('Interaction has been terminated and its data pushed to xConnect.'))\r\n      .catch((error) => alert(error));\r\n  }\r\n\r\n  submitBatching() {\r\n    trackingApi\r\n      .trackEvent(\r\n        [\r\n          { eventId: 'Download' },\r\n          { goalId: 'Instant Demo' },\r\n          { outcomeId: 'Opportunity' },\r\n          { pageId: '{110D559F-DEA5-42EA-9C1C-8A5DF7E70EF9}', url: '/arbitrary/url/you/own' },\r\n          // this goal will be added to the new page/route ID set above, not the current route\r\n          { goalId: 'Register' },\r\n        ],\r\n        this.trackingApiOptions\r\n      )\r\n      .then(() => alert('Batch of events pushed'))\r\n      .catch((error) => alert(error));\r\n  }\r\n\r\n  render() {\r\n    const disconnectedMode = this.props.sitecoreContext.itemId === 'available-in-connected-mode';\r\n\r\n    return (\r\n      <StyleguideSpecimen {...this.props} e2eId=\"styleguide-tracking\">\r\n        {disconnectedMode && (\r\n          <p>The tracking API is only available in connected, integrated, or headless modes.</p>\r\n        )}\r\n        {!disconnectedMode && (\r\n          <div>\r\n            <p className=\"alert alert-warning\">\r\n              Note: The JSS tracker API is disabled by default. Consult the{' '}\r\n              <a href=\"https://jss.sitecore.com/docs/fundamentals/services/tracking\">\r\n                tracking documentation\r\n              </a>{' '}\r\n              to enable it.\r\n            </p>\r\n            <div className=\"row\">\r\n              <fieldset className=\"form-group col-sm\">\r\n                <legend>Event</legend>\r\n                <p>\r\n                  Events are defined in <code>/sitecore/system/Settings/Analytics/Page Events</code>\r\n                </p>\r\n                <label htmlFor=\"event\">Event GUID or Name</label>\r\n                <input type=\"text\" id=\"event\" className=\"form-control\" ref={this.event} />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary mt-3\"\r\n                  onClick={this.submitEvent.bind(this)}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </fieldset>\r\n\r\n              <fieldset className=\"form-group col-sm\">\r\n                <legend>Goal</legend>\r\n                <p>\r\n                  Goals are defined in <code>/sitecore/system/Marketing Control Panel/Goals</code>\r\n                </p>\r\n                <label htmlFor=\"goal\">Goal GUID or Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"goal\"\r\n                  ref={this.goal}\r\n                  placeholder=\"i.e. Register\"\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary mt-3\"\r\n                  onClick={this.submitGoal.bind(this)}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </fieldset>\r\n            </div>\r\n            <div className=\"row\">\r\n              <fieldset className=\"form-group col-sm\">\r\n                <legend>Outcome</legend>\r\n                <p>\r\n                  Outcomes are defined in{' '}\r\n                  <code>/sitecore/system/Marketing Control Panel/Outcomes</code>\r\n                </p>\r\n                <label htmlFor=\"outcomeName\">Outcome GUID or Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"outcomeName\"\r\n                  ref={this.outcomeName}\r\n                  placeholder=\"i.e. Marketing Lead\"\r\n                />\r\n                <br />\r\n                <label htmlFor=\"outcomeValue\">Monetary Value (optional)</label>\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"form-control\"\r\n                  id=\"outcomeValue\"\r\n                  ref={this.outcomeValue}\r\n                  placeholder=\"i.e. 1337.00\"\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary mt-3\"\r\n                  onClick={this.submitOutcome.bind(this)}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </fieldset>\r\n\r\n              <fieldset className=\"form-group col-sm\">\r\n                <legend>Campaign</legend>\r\n                <p>\r\n                  Campaigns are defined in{' '}\r\n                  <code>/sitecore/system/Marketing Control Panel/Campaigns</code>\r\n                </p>\r\n                <label htmlFor=\"campaign\">Campaign GUID or Name</label>\r\n                <input type=\"text\" className=\"form-control\" id=\"campaign\" ref={this.campaign} />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary mt-3\"\r\n                  onClick={this.triggerCampaign.bind(this)}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </fieldset>\r\n            </div>\r\n            <div className=\"row\">\r\n              <fieldset className=\"form-group col-sm\">\r\n                <legend>Page View</legend>\r\n                <p>\r\n                  Track arbitrary page views for custom routing or offline use. Note that Layout\r\n                  Service tracks page views by default unless <code>tracking=false</code> is passed\r\n                  in its query string.\r\n                </p>\r\n                <label htmlFor=\"pageId\">Page Item GUID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"pageId\"\r\n                  ref={this.pageId}\r\n                  placeholder=\"i.e. {11111111-1111-1111-1111-111111111111}\"\r\n                />\r\n                <br />\r\n                <label htmlFor=\"pageUrl\">Page URL</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"pageUrl\"\r\n                  ref={this.pageUrl}\r\n                  placeholder=\"i.e. /foo/bar\"\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary mt-3\"\r\n                  onClick={this.submitPageView.bind(this)}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </fieldset>\r\n\r\n              <fieldset className=\"form-group col-sm\">\r\n                <legend>Batching</legend>\r\n                <p>\r\n                  The tracking API supports pushing a whole batch of events in a single request.\r\n                  This can be useful for queuing strategies or offline PWA usage.\r\n                </p>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  onClick={this.submitBatching.bind(this)}\r\n                >\r\n                  Submit Batch of Events\r\n                </button>\r\n              </fieldset>\r\n            </div>\r\n            <div className=\"row\">\r\n              <fieldset className=\"form-group col-sm\">\r\n                <legend>Interaction Control</legend>\r\n                <p>\r\n                  Tracking data is not pushed into the xConnect service until your session ends on\r\n                  the Sitecore server. Click this button to instantly end your session and flush the\r\n                  data - great for debugging and testing.\r\n                </p>\r\n                <p className=\"alert alert-warning\">\r\n                  Note: By default <em>anonymous</em> contacts will not be shown in Experience\r\n                  Profile. If your interactions are not showing up in Experience Profile, you may\r\n                  need to{' '}\r\n                  <a href=\"https://doc.sitecore.net/developers/xp/xconnect/xconnect-search-indexer/enable-anonymous-contact-indexing.html\">\r\n                    enable anonymous contact indexing.\r\n                  </a>\r\n                </p>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  onClick={this.abandonSession.bind(this)}\r\n                >\r\n                  End Interaction\r\n                </button>\r\n              </fieldset>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </StyleguideSpecimen>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withSitecoreContext()(StyleguideTracking);\r\n","/* eslint-disable */\n// Do not edit this file, it is auto-generated at build time!\n// See scripts/generate-component-factory.js to modify the generation of this file.\nimport Article from '../components/Article';\nimport BootCampAuthor from '../components/BootCampAuthor';\nimport BootCampDepartments from '../components/BootCampDepartments';\nimport ContentBlock from '../components/ContentBlock';\nimport GraphQLConnectedDemo from '../components/GraphQL-ConnectedDemo';\nimport GraphQLIntegratedDemo from '../components/GraphQL-IntegratedDemo';\nimport GraphQLLayout from '../components/GraphQL-Layout';\nimport ProductCarousel from '../components/ProductCarousel';\nimport ProductDetails from '../components/ProductDetails';\nimport StyleguideComponentParams from '../components/Styleguide-ComponentParams';\nimport StyleguideCustomRouteType from '../components/Styleguide-CustomRouteType';\nimport StyleguideFieldUsageCheckbox from '../components/Styleguide-FieldUsage-Checkbox';\nimport StyleguideFieldUsageContentList from '../components/Styleguide-FieldUsage-ContentList';\nimport StyleguideFieldUsageCustom from '../components/Styleguide-FieldUsage-Custom';\nimport StyleguideFieldUsageDate from '../components/Styleguide-FieldUsage-Date';\nimport StyleguideFieldUsageFile from '../components/Styleguide-FieldUsage-File';\nimport StyleguideFieldUsageImage from '../components/Styleguide-FieldUsage-Image';\nimport StyleguideFieldUsageItemLink from '../components/Styleguide-FieldUsage-ItemLink';\nimport StyleguideFieldUsageLink from '../components/Styleguide-FieldUsage-Link';\nimport StyleguideFieldUsageNumber from '../components/Styleguide-FieldUsage-Number';\nimport StyleguideFieldUsageRichText from '../components/Styleguide-FieldUsage-RichText';\nimport StyleguideFieldUsageText from '../components/Styleguide-FieldUsage-Text';\nimport StyleguideLayout from '../components/Styleguide-Layout';\nimport StyleguideLayoutReuse from '../components/Styleguide-Layout-Reuse';\nimport StyleguideLayoutTabs from '../components/Styleguide-Layout-Tabs';\nimport StyleguideLayoutTabsTab from '../components/Styleguide-Layout-Tabs-Tab';\nimport StyleguideMultilingual from '../components/Styleguide-Multilingual';\nimport StyleguideRouteFields from '../components/Styleguide-RouteFields';\nimport StyleguideSection from '../components/Styleguide-Section';\nimport StyleguideSitecoreContext from '../components/Styleguide-SitecoreContext';\nimport StyleguideTracking from '../components/Styleguide-Tracking';\n\nconst components = new Map();\ncomponents.set('Article', Article);\ncomponents.set('BootCampAuthor', BootCampAuthor);\ncomponents.set('BootCampDepartments', BootCampDepartments);\ncomponents.set('ContentBlock', ContentBlock);\ncomponents.set('GraphQL-ConnectedDemo', GraphQLConnectedDemo);\ncomponents.set('GraphQL-IntegratedDemo', GraphQLIntegratedDemo);\ncomponents.set('GraphQL-Layout', GraphQLLayout);\ncomponents.set('ProductCarousel', ProductCarousel);\ncomponents.set('ProductDetails', ProductDetails);\ncomponents.set('Styleguide-ComponentParams', StyleguideComponentParams);\ncomponents.set('Styleguide-CustomRouteType', StyleguideCustomRouteType);\ncomponents.set('Styleguide-FieldUsage-Checkbox', StyleguideFieldUsageCheckbox);\ncomponents.set('Styleguide-FieldUsage-ContentList', StyleguideFieldUsageContentList);\ncomponents.set('Styleguide-FieldUsage-Custom', StyleguideFieldUsageCustom);\ncomponents.set('Styleguide-FieldUsage-Date', StyleguideFieldUsageDate);\ncomponents.set('Styleguide-FieldUsage-File', StyleguideFieldUsageFile);\ncomponents.set('Styleguide-FieldUsage-Image', StyleguideFieldUsageImage);\ncomponents.set('Styleguide-FieldUsage-ItemLink', StyleguideFieldUsageItemLink);\ncomponents.set('Styleguide-FieldUsage-Link', StyleguideFieldUsageLink);\ncomponents.set('Styleguide-FieldUsage-Number', StyleguideFieldUsageNumber);\ncomponents.set('Styleguide-FieldUsage-RichText', StyleguideFieldUsageRichText);\ncomponents.set('Styleguide-FieldUsage-Text', StyleguideFieldUsageText);\ncomponents.set('Styleguide-Layout', StyleguideLayout);\ncomponents.set('Styleguide-Layout-Reuse', StyleguideLayoutReuse);\ncomponents.set('Styleguide-Layout-Tabs', StyleguideLayoutTabs);\ncomponents.set('Styleguide-Layout-Tabs-Tab', StyleguideLayoutTabsTab);\ncomponents.set('Styleguide-Multilingual', StyleguideMultilingual);\ncomponents.set('Styleguide-RouteFields', StyleguideRouteFields);\ncomponents.set('Styleguide-Section', StyleguideSection);\ncomponents.set('Styleguide-SitecoreContext', StyleguideSitecoreContext);\ncomponents.set('Styleguide-Tracking', StyleguideTracking);\n\nexport default function componentFactory(componentName) {\n  return components.get(componentName);\n};\n","import { RestLayoutService } from '@sitecore-jss/sitecore-jss-react';\r\nimport config from '../temp/config';\r\n\r\nexport class LayoutServiceFactory {\r\n  create() {\r\n    return new RestLayoutService({\r\n      apiHost: config.sitecoreApiHost,\r\n      apiKey: config.sitecoreApiKey,\r\n      siteName: config.jssAppName,\r\n      configurationName: 'default',\r\n    });\r\n  }\r\n}\r\n\r\nexport const layoutServiceFactory = new LayoutServiceFactory();\r\n","export default __webpack_public_path__ + \"static/media/sc_logo.bf26bc22.svg\";","import React from 'react';\r\nimport { Placeholder, VisitorIdentification } from '@sitecore-jss/sitecore-jss-react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { withTranslation } from 'react-i18next';\r\nimport deepEqual from 'deep-equal';\r\nimport Helmet from 'react-helmet';\r\n\r\n// Using bootstrap is completely optional. It's used here to provide a clean layout for samples,\r\n// without needing extra CSS in the sample app. Remove it in package.json as well if it's removed here.\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './assets/app.css';\r\nimport logo from './assets/sc_logo.svg';\r\n\r\n/*\r\n  APP LAYOUT\r\n  This is where the app's HTML structure and root placeholders should be defined.\r\n\r\n  All routes share this root layout by default (this could be customized in RouteHandler),\r\n  but components added to inner placeholders are route-specific.\r\n*/\r\n\r\n// This is boilerplate navigation for sample purposes. Most apps should throw this away and use their own navigation implementation.\r\n// Most apps may also wish to use GraphQL for their navigation construction; this sample does not simply to support disconnected mode.\r\nlet Navigation = ({ t, i18n }) => (\r\n  <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom\">\r\n    <h5 className=\"my-0 mr-md-auto font-weight-normal\">\r\n      <NavLink to=\"/\" className=\"text-dark\">\r\n        <img src={logo} alt=\"Sitecore\" />\r\n      </NavLink>\r\n    </h5>\r\n    <nav className=\"my-2 my-md-0 mr-md-3\">\r\n      <a\r\n        className=\"p-2 text-dark\"\r\n        href=\"https://jss.sitecore.com\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        {t('Documentation')}\r\n      </a>\r\n      <NavLink to=\"/styleguide\" className=\"p-2 text-dark\">\r\n        {t('Styleguide')}\r\n      </NavLink>\r\n      <NavLink to=\"/graphql\" className=\"p-2 text-dark\">\r\n        {t('GraphQL')}\r\n      </NavLink>\r\n    </nav>\r\n  </div>\r\n);\r\n\r\n// inject dictionary props (`t`) into navigation so we can translate it\r\n// NOTE: using this is needed instead of using i18next directly to keep\r\n// the component state updated when i18n state (e.g. current language) changes\r\nNavigation = withTranslation()(Navigation);\r\n\r\nconst Layout = ({ route }) => (\r\n  <React.Fragment>\r\n    {/* react-helmet enables setting <head> contents, like title and OG meta tags */}\r\n    <Helmet>\r\n      <title>\r\n        {(route.fields && route.fields.pageTitle && route.fields.pageTitle.value) || 'Page'}\r\n      </title>\r\n    </Helmet>\r\n\r\n    {/*\r\n      VisitorIdentification is necessary for Sitecore Analytics to determine if the visitor is a robot.\r\n      If Sitecore XP (with xConnect/xDB) is used, this is required or else analytics will not be collected for the JSS app.\r\n      For XM (CMS-only) apps, this should be removed.\r\n\r\n      VI detection only runs once for a given analytics ID, so this is not a recurring operation once cookies are established.\r\n    */}\r\n    <VisitorIdentification />\r\n\r\n    <Navigation />\r\n\r\n    {/* root placeholder for the app, which we add components to using route data */}\r\n    <div className=\"container\">\r\n      <Placeholder name=\"jss-main\" rendering={route} />\r\n    </div>\r\n  </React.Fragment>\r\n);\r\n\r\n// We don't want to re-render `Layout` when route is changed but layout data is not loaded\r\n// Layout will be re-rendered only when layout data is changed\r\nconst propsAreEqual = (prevProps, nextProps) => {\r\n  if (deepEqual(prevProps.route, nextProps.route)) return true;\r\n\r\n  return false;\r\n};\r\n\r\nexport default React.memo(Layout, propsAreEqual);\r\n","import React from 'react';\r\n\r\n// Renders a route-not-found message when no route is available from Sitecore\r\n// The JSS equivalent of a 404 Not Found page.\r\n\r\n// This is invoked from RouteHandler when Sitecore returns no valid route data.\r\n// The NotFound component receives the Layout Service Context data, but no route data.\r\n// This can be used to power parts of your site, such as navigation, from LS context additions\r\n// without losing the ability to render them on your 404 pages :)\r\n\r\nconst NotFound = ({ context = { site: { name: '' }, language: '' } }) => (\r\n  <React.Fragment>\r\n    <h1>Page not found</h1>\r\n    <p>This page does not exist.</p>\r\n    <p>\r\n      Site: {context.site && context.site.name}\r\n      <br />\r\n      Language: {context.language}\r\n    </p>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport i18n from 'i18next';\r\nimport Helmet from 'react-helmet';\r\nimport { isEditorActive, withSitecoreContext } from '@sitecore-jss/sitecore-jss-react';\r\nimport { layoutServiceFactory } from './lib/layout-service-factory';\r\nimport config from './temp/config';\r\nimport Layout from './Layout';\r\nimport NotFound from './NotFound';\r\n\r\n/* eslint-disable no-console */\r\n\r\n// Dynamic route handler for Sitecore items.\r\n// Because JSS app routes are defined in Sitecore, traditional static React routing isn't enough -\r\n// we need to be able to load dynamic route data from Sitecore after the client side route changes.\r\n// So react-router delegates all route rendering to this handler, which attempts to get the right\r\n// route data from Sitecore - and if none exists, renders the not found component.\r\n\r\nclass RouteHandler extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // tell i18next to sync its current language with the route language\r\n    this.updateLanguage();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If we are not using SSR we have to load layout data\r\n    if (!this.props.isSSR) {\r\n      this.updateLayoutData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads route data from Sitecore Layout Service into state.routeData\r\n   */\r\n  updateLayoutData() {\r\n    let sitecoreRoutePath = this.props.route.match.params.sitecoreRoute || '/';\r\n    if (!sitecoreRoutePath.startsWith('/')) {\r\n      sitecoreRoutePath = `/${sitecoreRoutePath}`;\r\n    }\r\n\r\n    const language = this.getLanguage();\r\n\r\n    // instantiate the dictionary service.\r\n    const layoutServiceInstance = layoutServiceFactory.create();\r\n\r\n    // get the route data for the new route\r\n    layoutServiceInstance.fetchLayoutData(sitecoreRoutePath, language).then((routeData) => {\r\n      this.props.updateSitecoreContext(routeData);\r\n    });\r\n  }\r\n\r\n  getLanguage() {\r\n    return (\r\n      this.props.route.match.params.lang ||\r\n      this.props.sitecoreContext.language ||\r\n      config.defaultLanguage\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the current app language to match the route data.\r\n   */\r\n  updateLanguage() {\r\n    const newLanguage = this.getLanguage();\r\n\r\n    if (i18n.language !== newLanguage) {\r\n      i18n.changeLanguage(newLanguage);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    const existingRoute = previousProps.route.match.url;\r\n    const newRoute = this.props.route.match.url;\r\n\r\n    // don't change state (refetch route data) if the route has not changed\r\n    if (existingRoute === newRoute) {\r\n      return;\r\n    }\r\n\r\n    // if in Sitecore editor - force reload instead of route data update\r\n    // avoids confusing Sitecore's editing JS\r\n    if (isEditorActive()) {\r\n      window.location.assign(newRoute);\r\n      return;\r\n    }\r\n\r\n    this.updateLanguage();\r\n    this.updateLayoutData();\r\n  }\r\n\r\n  render() {\r\n    const layoutData = this.props.sitecoreContext;\r\n\r\n    // Note: this is client-side only 404 handling. Server-side 404 handling is the responsibility\r\n    // of the server being used (i.e. node-headless-ssr-proxy and Sitecore intergrated rendering know how to send 404 status codes).\r\n    // `route` is null in case if route is not found\r\n    if (layoutData.route === null) {\r\n      return (\r\n        <div>\r\n          <Helmet>\r\n            <title>{i18n.t('Page not found')}</title>\r\n          </Helmet>\r\n          <NotFound context={layoutData} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Don't render anything if the route data or dictionary data is not fully loaded yet.\r\n    // This is a good place for a \"Loading\" component, if one is needed.\r\n    if (!layoutData.route) {\r\n      return null;\r\n    }\r\n\r\n    // Render the app's root structural layout\r\n    return <Layout route={layoutData.route} />;\r\n  }\r\n}\r\n\r\nexport default withSitecoreContext({ updatable: true })(RouteHandler);\r\n","import React from 'react';\r\nimport { SitecoreContext } from '@sitecore-jss/sitecore-jss-react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport componentFactory from './temp/componentFactory';\r\nimport RouteHandler from './RouteHandler';\r\n\r\n// This is the main JSX entry point of the app invoked by the renderer (server or client rendering).\r\n// By default the app's normal rendering is delegated to <RouteHandler> that handles the loading of JSS route data.\r\n\r\n// support languages in the URL prefix\r\n// e.g. /da-DK/path, or /en/path, or /path\r\nexport const routePatterns = [\r\n  '/:lang([a-z]{2}-[A-Z]{2})/:sitecoreRoute*',\r\n  '/:lang([a-z]{2})/:sitecoreRoute*',\r\n  '/:sitecoreRoute*',\r\n];\r\n\r\n// wrap the app with:\r\n// ApolloProvider: provides an instance of Apollo GraphQL client to the app to make Connected GraphQL queries.\r\n//    Not needed if not using connected GraphQL.\r\n// SitecoreContext: provides component resolution and context services via withSitecoreContext\r\n// Router: provides a basic routing setup that will resolve Sitecore item routes and allow for language URL prefixes.\r\nclass AppRoot extends React.Component {\r\n  renderRoute = (props) => {\r\n    return <RouteHandler route={props} isSSR={!!this.props.ssrState} />;\r\n  };\r\n\r\n  render() {\r\n    const { path, Router, graphQLClient } = this.props;\r\n\r\n    return (\r\n      <ApolloProvider client={graphQLClient}>\r\n        <SitecoreContext componentFactory={componentFactory} layoutData={this.props.ssrState}>\r\n          <Router location={path} context={{}}>\r\n            <Switch>\r\n              <Route path=\"/:lang([a-z]{2}-[A-Z]{2})/:sitecoreRoute*\" render={this.renderRoute} />\r\n              <Route path=\"/:lang([a-z]{2})/:sitecoreRoute*\" render={this.renderRoute} />\r\n              <Route path=\"/:sitecoreRoute*\" render={this.renderRoute} />\r\n            </Switch>\r\n          </Router>\r\n        </SitecoreContext>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppRoot;\r\n","import { RestDictionaryService } from '@sitecore-jss/sitecore-jss-react';\r\nimport config from '../temp/config';\r\nexport class DictionaryServiceFactory {\r\n  create() {\r\n    return new RestDictionaryService({\r\n      apiHost: config.sitecoreApiHost,\r\n      apiKey: config.sitecoreApiKey,\r\n      siteName: config.jssAppName,\r\n    });\r\n  }\r\n}\r\n\r\nexport const dictionaryServiceFactory = new DictionaryServiceFactory();\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport AppRoot from './AppRoot';\r\nimport GraphQLClientFactory from './lib/GraphQLClientFactory';\r\nimport config from './temp/config';\r\nimport i18ninit from './i18n';\r\n\r\n/* eslint-disable no-underscore-dangle */\r\n\r\nlet renderFunction = ReactDOM.render;\r\n\r\nlet initLanguage = config.defaultLanguage;\r\n\r\n/*\r\n  SSR Data\r\n  If we're running in a server-side rendering scenario,\r\n  the server will provide JSON in the #__JSS_STATE__ element\r\n  for us to acquire the initial state to run with on the client.\r\n\r\n  This enables us to skip a network request to load up the layout data.\r\n  We are emitting a quiescent script with JSON so that we can take advantage\r\n  of JSON.parse()'s speed advantage over parsing full JS, and enable\r\n  working without needing `unsafe-inline` in Content Security Policies.\r\n\r\n  SSR is initiated from /server/server.js.\r\n*/\r\nlet __JSS_STATE__ = null;\r\nconst ssrRawJson = document.getElementById('__JSS_STATE__');\r\nif (ssrRawJson) {\r\n  __JSS_STATE__ = JSON.parse(ssrRawJson.innerHTML);\r\n}\r\nif (__JSS_STATE__) {\r\n  // when React initializes from a SSR-based initial state, you need to render with `hydrate` instead of `render`\r\n  renderFunction = ReactDOM.hydrate;\r\n\r\n  // set i18n language SSR state language instead of static config default language\r\n  initLanguage = __JSS_STATE__.sitecore.context.language;\r\n}\r\n\r\n/*\r\n  GraphQL Data\r\n  The Apollo Client needs to be initialized to make GraphQL available to the JSS app.\r\n  Not using GraphQL? Remove this, and the ApolloContext from `AppRoot`.\r\n*/\r\n// Apollo supports SSR of GraphQL queries, so like JSS SSR, it has an object we can pre-hydrate the client cache from\r\n// to avoid needing to re-run GraphQL queries after the SSR page loads\r\nconst initialGraphQLState =\r\n  __JSS_STATE__ && __JSS_STATE__.APOLLO_STATE ? __JSS_STATE__.APOLLO_STATE : null;\r\n\r\nconst graphQLClient = GraphQLClientFactory(config.graphQLEndpoint, false, initialGraphQLState);\r\n\r\n/*\r\n  App Rendering\r\n*/\r\n// initialize the dictionary, then render the app\r\n// note: if not making a multlingual app, the dictionary init can be removed.\r\ni18ninit(initLanguage).then(() => {\r\n  // HTML element to place the app into\r\n  const rootElement = document.getElementById('root');\r\n\r\n  renderFunction(\r\n    <AppRoot\r\n      path={window.location.pathname}\r\n      Router={BrowserRouter}\r\n      graphQLClient={graphQLClient}\r\n      ssrState={__JSS_STATE__}\r\n    />,\r\n    rootElement\r\n  );\r\n});\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport { dictionaryServiceFactory } from './lib/dictionary-service-factory';\r\n\r\n/**\r\n * Initializes the i18next library to provide a translation dictionary to the app.\r\n * If your app is not multilingual, this file and references to it can be removed.\r\n * Elsewhere in the app to use the dictionary `import { t } from 'i18next'; ... t('key')`\r\n * @param {string} language Optional, the initial language. Only used for SSR; otherwise language set in RouteHandler.\r\n * @param {*} dictionary Optional, the dictionary to load. Only used for SSR; otherwise, the dictionary is loaded via JSS dictionary service.\r\n */\r\nexport default function i18nInit(language, dictionary) {\r\n  return new Promise((resolve, reject) => {\r\n    const options = {\r\n      debug: false,\r\n      lng: language,\r\n      fallbackLng: false, // fallback to keys\r\n      load: 'currentOnly', // e.g. don't load 'es' when requesting 'es-MX' -- Sitecore config should handle this\r\n      useCookie: false, // using URLs and Sitecore to store language context, don't need a cookie\r\n\r\n      interpolation: {\r\n        escapeValue: false, // not needed for react\r\n      },\r\n    };\r\n\r\n    if (dictionary) {\r\n      // if we got dictionary passed, that means we're in a SSR context with a server-provided dictionary\r\n      // so we do not want a backend, because we already know all possible keys\r\n\r\n      if (!i18n.isInitialized) {\r\n        i18n.use(initReactI18next).init(options, (error) => {\r\n          if (error) reject(error);\r\n\r\n          i18n.addResourceBundle(language, 'translation', dictionary, true, true);\r\n\r\n          resolve();\r\n        });\r\n      } else {\r\n        i18n.changeLanguage(language).then(() => {\r\n          i18n.addResourceBundle(language, 'translation', dictionary, true, true);\r\n\r\n          resolve();\r\n        });\r\n      }\r\n    } else {\r\n      // We're running client-side, so we get translation data from the Sitecore dictionary API using fetch backend\r\n      // For higher performance (but less simplicity), consider adding the i18n chained backend to a local cache option like the local storage backend.\r\n\r\n      // instantiate the dictionary service.\r\n      const dictionaryServiceInstance = dictionaryServiceFactory.create();\r\n\r\n      i18n\r\n        .use({\r\n          type: 'backend',\r\n          read(language, _namespace, callback) {\r\n            dictionaryServiceInstance\r\n              .fetchDictionaryData(language)\r\n              .then((phrases) => {\r\n                callback(null, phrases);\r\n              })\r\n              .catch((err) => callback(err, false));\r\n          },\r\n        })\r\n        .use(initReactI18next)\r\n        .init(options, (error) => {\r\n          if (error) reject(error);\r\n\r\n          resolve();\r\n        });\r\n    }\r\n  });\r\n}\r\n","/* eslint-disable import/first */\r\n\r\nimport 'cross-fetch/polyfill';\r\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { sha256 } from 'js-sha256';\r\n\r\n/* eslint-disable import/order */\r\n\r\n/*\r\n  INTROSPECTION DATA\r\n  See https://www.apollographql.com/docs/react/recipes/fragment-matching.html\r\n  This enables the Apollo cache to process fragments on interface types correctly.\r\n  If this file does not exist, you may need to run the `jss graphql:update` script.\r\n*/\r\nimport introspectionQueryResultData from '../temp/GraphQLFragmentTypes.json';\r\n\r\n/*\r\n  QUERY LINK SELECTION\r\n  A link is transport which GraphQL queries are pushed across.\r\n  You have many choices.\r\n  See the apollo-link documentation for more details.\r\n*/\r\n\r\n// choose between a basic HTTP link to run queries...\r\n// import { createHttpLink } from 'apollo-link-http';\r\n// const link = createHttpLink({ uri: endpoint });\r\n\r\n// ...or a batched link (multiple queries within 10ms all go in one HTTP request)\r\nimport { BatchHttpLink } from '@apollo/client/link/batch-http';\r\n\r\n// ...and an automatic persisted query link, which reduces bandwidth by using query hashes to alias content\r\n// the APQ link is _chained_ behind another link that performs the actual HTTP calls, so you can choose\r\n// APQ + batched, or APQ + http links for example.\r\nimport { createPersistedQueryLink } from '@apollo/client/link/persisted-queries';\r\nimport config from '../temp/config';\r\n\r\nexport default function (endpoint, ssr, initialCacheState) {\r\n  /* HTTP link selection: default to batched + APQ */\r\n  const link = createPersistedQueryLink({ sha256 }).concat(\r\n    new BatchHttpLink({\r\n      uri: endpoint,\r\n      headers: {\r\n        connection: 'keep-alive',\r\n        sc_apikey: config.sitecoreApiKey,\r\n      },\r\n    })\r\n  );\r\n\r\n  const possibleTypes = {};\r\n\r\n  introspectionQueryResultData.__schema.types.forEach((supertype) => {\r\n    possibleTypes[supertype.name] = supertype.possibleTypes.map((subtype) => subtype.name);\r\n  });\r\n\r\n  const cache = new InMemoryCache({\r\n    possibleTypes,\r\n  });\r\n\r\n  return new ApolloClient({\r\n    ssrMode: ssr,\r\n    ssrForceFetchDelay: 100,\r\n    link,\r\n    cache: cache.restore(initialCacheState),\r\n  });\r\n}\r\n"],"sourceRoot":""}